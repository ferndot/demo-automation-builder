// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type Flow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description,omitempty"`
	Steps       []*Step   `json:"steps"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type Mutation struct {
}

type Query struct {
}

type Step struct {
	Type        StepType       `json:"type"`
	Description *string        `json:"description,omitempty"`
	Config      map[string]any `json:"config,omitempty"`
}

type UpsertFlow struct {
	ID          *uuid.UUID    `json:"id,omitempty"`
	Name        string        `json:"name"`
	Description *string       `json:"description,omitempty"`
	Steps       []*UpsertStep `json:"steps"`
}

type UpsertStep struct {
	Type        StepType       `json:"type"`
	Description *string        `json:"description,omitempty"`
	Config      map[string]any `json:"config,omitempty"`
}

type StepType string

const (
	StepTypeIntegrationAPI    StepType = "INTEGRATION__API"
	StepTypeNotificationEmail StepType = "NOTIFICATION__EMAIL"
)

var AllStepType = []StepType{
	StepTypeIntegrationAPI,
	StepTypeNotificationEmail,
}

func (e StepType) IsValid() bool {
	switch e {
	case StepTypeIntegrationAPI, StepTypeNotificationEmail:
		return true
	}
	return false
}

func (e StepType) String() string {
	return string(e)
}

func (e *StepType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StepType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StepType", str)
	}
	return nil
}

func (e StepType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
