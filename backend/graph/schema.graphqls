scalar UUID
scalar Map
scalar Time

type Flow {
  id: UUID!
  name: String!
  description: String
  steps: [Step!]!

  # It is best practice to store creation/update timestamps for auditability
  createdAt: Time!
  updatedAt: Time!
}

input UpsertFlow {
  id: UUID
  name: String!
  description: String
  steps: [UpsertStep!]!
}

# Namespaced for readability once the step type list grows
enum StepType {
  INTEGRATION__API
  NOTIFICATION__EMAIL
}

type Step {
  type: StepType!
  description: String

  # This is a map to conveniently store a wide variety of configuration options
  config: Map
}

input UpsertStep {
  type: StepType!
  description: String
  config: Map
}

type Query {
  listFlows: [Flow!]!
  getFlow(id: UUID!): Flow

  # TODO: Return step types from backend instead of hardcoding them in the frontend
  # getStepTypes(): StepType!
}

type Mutation {
  upsertFlow(input: UpsertFlow!): Flow!
  deleteFlow(id: UUID!): UUID!
}
